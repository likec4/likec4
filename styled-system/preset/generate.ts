import { defaultTheme, ElementShapes, ThemeColors } from '@likec4/core/src'
import { DEFAULT_THEME } from '@mantine/core'
import { themeToVars } from '@mantine/vanilla-extract'
import type { Config } from '@pandacss/dev'
import JSON5 from 'json5'
import { writeFileSync } from 'node:fs'
import {
  capitalize,
  entries,
  keys,
  map,
  mapKeys,
  mapToObj,
  mapValues,
  pipe,
  range,
} from 'remeda'
const mantineVars = themeToVars({})

// omitting stack her
type MantineColors = typeof mantineVars.colors
type MantineColorValues = typeof mantineVars.colors.primaryColors
type ExtendableTheme = NonNullable<Config['theme']>

const mapcolorToVar = <C extends keyof MantineColors>(color: C) => ({
  [color]: {
    value: mantineVars.colors[color] as string,
  },
} as {
  [key in C]: { value: string }
})

const mapcolors = (colorkey: keyof MantineColors, prefix = colorkey) => {
  const color = mantineVars.colors[colorkey] as MantineColorValues
  return ({
    [prefix]: {
      DEFAULT: {
        description: `Mantine color ${colorkey}`,
        value: color[6],
      },
      filled: {
        description: `Mantine color ${colorkey} filled`,
        value: color.filled,
      },
      filledHover: {
        description: `Mantine color ${colorkey} filled hover`,
        value: color.filledHover,
      },
      light: {
        description: `Mantine color ${colorkey} light`,
        value: color.light,
      },
      lightHover: {
        description: `Mantine color ${colorkey} light hover`,
        value: color.lightHover,
      },
      lightColor: {
        description: `Mantine color ${colorkey} light color`,
        value: color.lightColor,
      },
      outline: {
        description: `Mantine color ${colorkey} outline`,
        value: color.outline,
      },
      outlineHover: {
        description: `Mantine color ${colorkey} outline hover`,
        value: color.outlineHover,
      },
    },
    ...mapToObj(range(0, 10), idx => [
      `${prefix}[${idx}]`,
      // @ts-ignore
      {
        description: `Mantine color ${colorkey}.${idx}`,
        value: color[idx],
      },
    ]),
  })
}

function rem(pixels: number) {
  return `${(pixels / 16).toPrecision(3)}rem`
}

const tokens = {
  spacing: {
    likec4: {
      ...mapValues(defaultTheme.spacing, (value, key) => ({
        description: `LikeC4 Diagram Spacing: ${key}`,
        value: `${value}px`,
      })),
    },
  },
  fontSizes: {
    'xxs': {
      value: rem(10),
    },
    ...mapValues(DEFAULT_THEME.fontSizes, (value) => ({ value })),
    likec4: {
      ...mapValues(defaultTheme.textSizes, (value, key) => ({
        description: `LikeC4 Diagram Text Size: ${key}`,
        value: rem(value),
      })),
    },
  },
  lineHeights: {
    ...mapValues(DEFAULT_THEME.lineHeights, (value) => ({ value })),
  },
  colors: {
    mantine: {
      colors: {
        ...mapcolors('primaryColors', 'primary'),
        ...mapcolorToVar('white'),
        ...mapcolorToVar('text'),
        ...mapcolorToVar('body'),
        ...mapcolorToVar('dimmed'),
        ...mapcolorToVar('defaultBorder'),
        ...mapcolorToVar('defaultColor'),
        ...mapcolorToVar('defaultHover'),
        ...mapcolorToVar('default'),
        ...mapcolorToVar('error'),
        ...mapcolorToVar('placeholder'),
        ...mapcolors('gray'),
        ...mapcolors('dark'),
        ...mapcolors('orange'),
        ...mapcolors('teal'),
        ...mapcolors('red'),
        ...mapcolors('green'),
        ...mapcolors('yellow'),
      },
    },
  },
} satisfies ExtendableTheme['tokens']

const globalVars = {
  '--likec4-palette-fill': defaultTheme.elements.primary.fill,
  '--likec4-palette-stroke': defaultTheme.elements.primary.stroke,
  '--likec4-palette-hiContrast': defaultTheme.elements.primary.hiContrast,
  '--likec4-palette-loContrast': defaultTheme.elements.primary.loContrast,
  '--likec4-palette-relation-stroke': defaultTheme.relationships.primary.lineColor,
  '--likec4-palette-relation-label': defaultTheme.relationships.primary.labelColor,
  '--likec4-palette-relation-label-bg': defaultTheme.relationships.primary.labelBgColor,
}

const ts = `// This file is auto-generated by scripts/generate.ts

export const breakpoints = ${JSON5.stringify(DEFAULT_THEME.breakpoints, null, 2)}

export const tokens = ${JSON5.stringify(tokens, null, 2)}

export const themeColors = [
${map(ThemeColors, (color) => `  '${color}' as const`).join(',\n')}
]

export const conditions = ${
  JSON5.stringify(
    {
      ...pipe(
        defaultTheme.sizes,
        mapValues((_, key) => `:where([data-likec4-shape-size='${key}']) &`),
        mapKeys((key) => 'shapeSize' + capitalize(key)),
      ),
      ...mapToObj(ElementShapes, (shape) => [
        'shape' + capitalize(shape),
        `:where([data-likec4-shape='${shape}']) &`,
      ]),
    },
    null,
    2,
  )
}

export const globalCss = ${
  JSON5.stringify(
    {
      ...mapToObj(entries(defaultTheme.textSizes), ([size]) => [
        `:where([data-likec4-text-size='${size}'])`,
        {
          '--likec4-text-size': `{fontSizes.likec4.${size}}`,
        },
      ]),
      ...mapToObj(keys(defaultTheme.spacing), (size) => [
        `:where([data-likec4-spacing='${size}'])`,
        {
          '--likec4-spacing': `{spacing.likec4.${size}}`,
        },
      ]),
    },
    null,
    2,
  )
}

// Default is likec4.primary
export const paletteGlobalVars = ${JSON5.stringify(globalVars, null, 2)}
`

writeFileSync('./src/generated.ts', ts)
console.log('theme generated')
