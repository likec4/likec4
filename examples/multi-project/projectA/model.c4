model {

  customer = actor 'Cloud System Customer' {
    description '
      The regular customer of the system
    '
  }

  cloud = system 'Cloud System' {
    description '
      Our SaaS platfrom that allows
      customers to interact with
      the latest technologies
    '

    ui = container 'Frontends' {
      description '
        All the frontend applications
        of Cloud System
      '
      style {
        shape browser
      }
      metadata {
        version '2.1.1'
      }
    }

    legacy = container 'Cloud Legacy' {
      #deprecated
      description '
        The legacy version of our SaaS
        MVP as was presented to the first customers
      '
      link ./.github/workflows/update-diagrams.yml#L19-L25 'L19-L25'
    }

    next = container 'Cloud Next' {
      description 'Cloud Next is the next version of our cloud systems'
    }

    supportUser = actor 'Support User' {
      description '
        A emploere from the support team
        Has limited access to the system
      '
      -> customer 'helps with questions' {
        metadata {
          rps '1000'
        }
      }
    }
  }
  customer .uses cloud 'uses and pays' {
    navigateTo dynamic-view-1
  }

}

views {

  view index {
    title 'Landscape'
    group 'SAAS' {
      color primary
      opacity 20%
      include * -> *
    }
    group 'External' {
      color green
      opacity 100%
      include
        customer with {
          color green
        }
    }


    exclude -> customer
  }

  view customer of customer {
    include customer

    group {
      include
        *,
        customer -> cloud.ui with {
          color red
        },
        supportUser
    }

    style supportUser {
      color indigo
    }
    autoLayout BottomTop
  }

  dynamic view dynamic-view-1 {
    title 'Dynamic View Example'

    link https://docs.likec4.dev/dsl/dynamic-views/ 'Docs'

    customer -> ui.dashboard 'opens' {
      notes '
        Customer opens dashboard in Browser
      '
    }
    ui.dashboard -> cloud.graphql {
      title '
        requests data overt rest
        for dashboard
      '
      technology 'unknown'
      notes '
        Next notes
        Multi line
      '
    }
    ui.dashboard <- cloud.graphql 'returns' {
      technology 'unknown'
      navigateTo cloud-to-amazon
    }

    ui.mobile -> cloud.graphql 'requests'
    ui.mobile <- cloud.graphql

    include cloud

    autoLayout TopBottom
    style * {
      color secondary
    }
    style cloud {
      opacity 40%
      color muted
    }
  }

  dynamic view cloud-to-amazon {
    title 'Cloud to amazon'

    next.backend -> next.events {
      notes '
      - Backend triggers EventManager
      - These calls enriched with data before publishing
      '
    }

    parallel {
      next.events -> amazon.sqs
      next.backend -> amazon.aurora
      ui.supportPanel -> amazon.aurora
    }

    include next, ui, amazon

    style next, ui, amazon {
      opacity 40%
    }

    autoLayout TopBottom
  }

}
