---
const navLinks = [
  { href: '#features', label: 'Features' },
  { href: '#demo', label: 'Demo' },
  { href: '#docs', label: 'Documentation' },
  { href: '#community', label: 'Community' },
];
---

<nav
  id="main-navigation"
  class="fixed top-0 left-0 right-0 z-50 transition-all duration-300 bg-transparent"
>
  <div class="max-w-7xl mx-auto px-6 py-4">
    <div class="flex items-center justify-between">
      <a href="#" class="flex items-center gap-3 group">
        <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-lg flex items-center justify-center shadow-lg group-hover:shadow-xl transition-shadow">
          <span class="text-white font-bold text-xl">C4</span>
        </div>
        <span class="text-2xl font-bold text-slate-900 dark:text-white">
          LikeC4
        </span>
      </a>

      <div class="hidden md:flex items-center gap-8">
        {navLinks.map((link) => (
          <a
            href={link.href}
            class="text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white font-medium transition-colors"
          >
            {link.label}
          </a>
        ))}
      </div>

      <div class="flex items-center gap-4">
        <button
          id="theme-toggle"
          class="p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors"
          aria-label="Toggle theme"
        >
          <svg id="sun-icon" class="w-5 h-5 text-slate-900 dark:text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="5"></circle>
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
          </svg>
          <svg id="moon-icon" class="w-5 h-5 text-slate-900 dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
        </button>

        <button
          id="mobile-menu-toggle"
          class="md:hidden p-2 rounded-lg bg-slate-100 dark:bg-slate-800 hover:bg-slate-200 dark:hover:bg-slate-700 transition-colors"
          aria-label="Toggle menu"
        >
          <svg id="menu-icon" class="w-5 h-5 text-slate-900 dark:text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <line x1="3" y1="6" x2="21" y2="6"></line>
            <line x1="3" y1="12" x2="21" y2="12"></line>
            <line x1="3" y1="18" x2="21" y2="18"></line>
          </svg>
          <svg id="close-icon" class="w-5 h-5 text-slate-900 dark:text-white hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
    </div>

    <div id="mobile-menu" class="md:hidden mt-4 py-4 border-t border-slate-200 dark:border-slate-700 hidden">
      <div class="flex flex-col gap-4">
        {navLinks.map((link) => (
          <a
            href={link.href}
            class="mobile-nav-link text-slate-600 dark:text-slate-300 hover:text-slate-900 dark:hover:text-white font-medium transition-colors"
          >
            {link.label}
          </a>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  // Theme management
  function initializeTheme(): void {
    const savedTheme = localStorage.getItem('theme');
    const isDark = savedTheme === 'dark' || 
      (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches);
    
    updateTheme(isDark);
  }

  function updateTheme(isDark: boolean): void {
    const html = document.documentElement;
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');
    
    if (isDark) {
      html.classList.add('dark');
      localStorage.setItem('theme', 'dark');
      sunIcon?.classList.remove('hidden');
      moonIcon?.classList.add('hidden');
    } else {
      html.classList.remove('dark');
      localStorage.setItem('theme', 'light');
      sunIcon?.classList.add('hidden');
      moonIcon?.classList.remove('hidden');
    }
  }

  function toggleTheme(): void {
    const isDark = document.documentElement.classList.contains('dark');
    updateTheme(!isDark);
  }

  // Scroll handling
  function handleScroll(): void {
    const nav = document.getElementById('main-navigation');
    const isScrolled = window.scrollY > 20;
    
    if (nav) {
      if (isScrolled) {
        nav.className = nav.className.replace('bg-transparent', 'bg-white/80 dark:bg-slate-900/80 backdrop-blur-lg shadow-lg');
      } else {
        nav.className = nav.className.replace('bg-white/80 dark:bg-slate-900/80 backdrop-blur-lg shadow-lg', 'bg-transparent');
      }
    }
  }

  // Mobile menu handling
  function toggleMobileMenu(): void {
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (mobileMenu && menuIcon && closeIcon) {
      const isHidden = mobileMenu.classList.contains('hidden');
      
      if (isHidden) {
        mobileMenu.classList.remove('hidden');
        menuIcon.classList.add('hidden');
        closeIcon.classList.remove('hidden');
      } else {
        mobileMenu.classList.add('hidden');
        menuIcon.classList.remove('hidden');
        closeIcon.classList.add('hidden');
      }
    }
  }

  function closeMobileMenu(): void {
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (mobileMenu && menuIcon && closeIcon) {
      mobileMenu.classList.add('hidden');
      menuIcon.classList.remove('hidden');
      closeIcon.classList.add('hidden');
    }
  }

  // Initialize on DOM content loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeTheme();
    
    // Event listeners
    const themeToggle = document.getElementById('theme-toggle');
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    
    themeToggle?.addEventListener('click', toggleTheme);
    mobileMenuToggle?.addEventListener('click', toggleMobileMenu);
    
    // Close mobile menu when clicking on nav links
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', closeMobileMenu);
    });
    
    // Scroll listener
    window.addEventListener('scroll', handleScroll);
  });

  // Handle page navigation (for Astro's client-side routing)
  document.addEventListener('astro:page-load', () => {
    initializeTheme();
    
    // Re-attach event listeners after page navigation
    const themeToggle = document.getElementById('theme-toggle');
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    
    themeToggle?.addEventListener('click', toggleTheme);
    mobileMenuToggle?.addEventListener('click', toggleMobileMenu);
    
    mobileNavLinks.forEach(link => {
      link.addEventListener('click', closeMobileMenu);
    });
  });
</script>
